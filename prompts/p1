#!/usr/bin/env bash

## Uncomment to disable git info
#POWERLINE_GIT=0

__powerline() {
    # Colorscheme
    RESET='\[\033[m\]'
    CYAN='\[\033[0;34m\]'
    BLUE='\[\033[0;36m\]'
    GREEN='\[\033[0;32m\]'
    RED='\[\033[0;31m\]'
    YELLOW='\[\033[0;33m\]'
    
    COLOR_CWD=$BLUE
    COLOR_GIT=$YELLOW

    SYMBOL_GIT_BRANCH='â‘‚'
    SYMBOL_GIT_MODIFIED='*'
    SYMBOL_GIT_PUSH=$'\u21e1' # arrow up (broken lines)
    SYMBOL_GIT_PULL=$'\u21e3' # arrow down (broken lines)
    DOT=$'\u26ab'

    PS_SYMBOL="$DOT"

    __git_info() { 
        [[ $POWERLINE_GIT = 0 ]] && return # disabled
        hash git 2>/dev/null || return # git not found
        local git_eng="env LANG=C git"   # force git output in English

        # get current branch name
        local ref=$($git_eng symbolic-ref --short HEAD 2>/dev/null)

        if [[ -n "$ref" ]]; then
            # prepend branch symbol
            ref=$SYMBOL_GIT_BRANCH$ref
        else
            # get tag name or short unique hash
            ref=$($git_eng describe --tags --always 2>/dev/null)
        fi

        [[ -n "$ref" ]] || return  # not a git repo

        local marks

        # scan first two lines of output from `git status`
        while IFS= read -r line; do
            if [[ $line =~ ^## ]]; then # header line
                [[ $line =~ ahead\ ([0-9]+) ]] && marks+=" $SYMBOL_GIT_PUSH${BASH_REMATCH[1]}"
                [[ $line =~ behind\ ([0-9]+) ]] && marks+=" $SYMBOL_GIT_PULL${BASH_REMATCH[1]}"
            #branch is modified if output contains more lines after header line
            else 
                marks="$SYMBOL_GIT_MODIFIED$marks"
                break
            fi
        done < <($git_eng status --porcelain --branch 2>/dev/null)  # note the space between the two <

        # print the git branch segment without a trailing newline
        printf " $ref$marks"
    }

    ps1() {
        # Check the exit code of the previous command and display different
        # colors in the prompt accordingly. 
        if [ $? -eq 0 ]; then
            local symbol="$GREEN $PS_SYMBOL $RESET"
        else
            local symbol="$RED $PS_SYMBOL $RESET"
        fi

        local cwd="$GREEN\u$RESET:$COLOR_CWD\W$RESET"

        if shopt -q promptvars; then
            __powerline_git_info="$(__git_info)"
            local git="$COLOR_GIT\${__powerline_git_info}$RESET"
        else
            # promptvars is disabled. Avoid creating unnecessary env var.
            local git="$COLOR_GIT$(__git_info)$RESET"
        fi

        PS1="$cwd$git$symbol"
    }

    PROMPT_COMMAND="ps1${PROMPT_COMMAND:+; $PROMPT_COMMAND}"
}

__powerline
unset __powerline
